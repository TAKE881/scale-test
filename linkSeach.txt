// =======================
// Folder Structure
// =======================
// .
// ├─ components
// │   ├─ PianoKey.js
// │   ├─ PianoKeyboard.js
// │   ├─ QuizLogic.js
// │   └─ QuizPage.js
// └─ pages
//     └─ quiz
//         └─ index.js


// =======================
// components/PianoKey.js
// =======================

import React from "react"
import * as Tone from "tone";

// PianoKey: Represents one key (white or black) on the piano
// Props:
//   note (string) : e.g. "C4", "D#4"
//   type ("white" | "black") : to style the key
//   onPlay (function) : function to call when key is clicked

export function PianoKey({ note, type, onPlay }) {
  const handleClick = () => {
    onPlay(note);
  };

  return (
    <div
      className={`key ${type}`}
      onClick={handleClick}
      style={{
        width: type === "white" ? "40px" : "30px",
        height: type === "white" ? "150px" : "100px",
        backgroundColor: type === "white" ? "#fff" : "#000",
        color: type === "white" ? "#000" : "#fff",
        border: "1px solid #333",
        position: type === "black" ? "absolute" : "relative",
        marginLeft: type === "black" ? "-15px" : 0,
        zIndex: type === "black" ? 1 : 0,
        display: "flex",
        justifyContent: "center",
        alignItems: "flex-end",
        cursor: "pointer",
      }}
    >
      <span style={{ fontSize: "10px", marginBottom: "5px" }}>{note}</span>
    </div>
  );
}



// =======================
// components/PianoKeyboard.js
// =======================

import React from "react"
import { PianoKey } from "./PianoKey";

// PianoKeyboard: Entire keyboard component
// Schedules note playback using Tone.js
// Renders multiple PianoKey components

export function PianoKeyboard() {
  const synth = new Tone.Synth().toDestination();

  // One octave worth of notes (C4-B4)
  const notes = [
    { note: "C4", type: "white" },
    { note: "C#4", type: "black" },
    { note: "D4", type: "white" },
    { note: "D#4", type: "black" },
    { note: "E4", type: "white" },
    { note: "F4", type: "white" },
    { note: "F#4", type: "black" },
    { note: "G4", type: "white" },
    { note: "G#4", type: "black" },
    { note: "A4", type: "white" },
    { note: "A#4", type: "black" },
    { note: "B4", type: "white" },
  ];

  const playNote = async (note) => {
    await Tone.start(); // iOS等では音を出す前にユーザーアクション必要
    synth.triggerAttackRelease(note, "8n");
  };

  return (
    <div
      className="piano"
      style={{
        display: "flex",
        position: "relative",
        width: "520px",
        height: "200px",
        marginBottom: "1rem",
      }}
    >
      {notes.map(({ note, type }) => (
        <PianoKey
          key={note}
          note={note}
          type={type}
          onPlay={playNote}
        />
      ))}
    </div>
  );
}


// =======================
// components/QuizLogic.js
// =======================

import React, { useState, useEffect } from "react"
import * as Tone from "tone";

// This is a separation of the quiz logic from the UI.
// You can keep your existing scale quiz logic here.

const scales = [
  { name: 'メジャースケール', notes: ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5'] },
  { name: 'ナチュラルマイナー', notes: ['A3', 'B3', 'C4', 'D4', 'E4', 'F4', 'G4', 'A4'] },
  { name: 'ハーモニックマイナー', notes: ['A3', 'B3', 'C4', 'D4', 'E4', 'F4', 'G#4', 'A4'] },
  { name: 'メロディックマイナー', notes: ['A3', 'B3', 'C4', 'D4', 'E4', 'F#4', 'G#4', 'A4'] },
  { name: 'メジャーペンタトニック', notes: ['C4', 'D4', 'E4', 'G4', 'A4', 'C5'] },
  { name: 'マイナーペンタトニック', notes: ['A3', 'C4', 'D4', 'E4', 'G4', 'A4'] },
  { name: 'ブルーススケール', notes: ['A3', 'C4', 'D4', 'D#4', 'E4', 'G4', 'A4'] },
  { name: 'ドリアン', notes: ['D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C4', 'D5'] },
  { name: 'リディアン', notes: ['F4', 'G4', 'A4', 'B4', 'C4', 'D4', 'E4', 'F5'] },
  { name: 'ミクソリディアン', notes: ['G4', 'A4', 'B4', 'C4', 'D4', 'E4', 'F4', 'G5'] },
];

export function useScaleQuizLogic(totalQuestions = 4) {
  const [currentScale, setCurrentScale] = useState(null);
  const [options, setOptions] = useState([]);
  const [score, setScore] = useState(0);
  const [questionNumber, setQuestionNumber] = useState(0);
  const [isQuizFinished, setIsQuizFinished] = useState(false);
  const [selectedOption, setSelectedOption] = useState(null);
  const [usedScales, setUsedScales] = useState([]);
  const [isAnswered, setIsAnswered] = useState(false);

  // Generate question at mount
  useEffect(() => {
    if (!isQuizFinished) {
      generateQuestion();
    }
  }, [isQuizFinished]);

  const generateQuestion = () => {
    const availableScales = scales.filter((s) => !usedScales.includes(s.name));
    if (availableScales.length === 0) {
      // All used up, end quiz?
      setIsQuizFinished(true);
      return;
    }

    const randomScale = availableScales[Math.floor(Math.random() * availableScales.length)];
    setCurrentScale(randomScale);
    setUsedScales((prev) => [...prev, randomScale.name]);

    const shuffled = [...scales].sort(() => 0.5 - Math.random()).slice(0, 4);
    if (!shuffled.includes(randomScale)) {
      shuffled[0] = randomScale;
    }
    setOptions(shuffled.sort(() => 0.5 - Math.random()));
  };

  const playScale = async () => {
    if (!currentScale) return;
    await Tone.start();
    const synth = new Tone.Synth().toDestination();

    const speedFactor = 1.5;
    const noteDuration = 0.5 / speedFactor;

    currentScale.notes.forEach((note, index) => {
      synth.triggerAttackRelease(note, "8n", Tone.now() + index * noteDuration);
    });
  };

  const handleAnswer = (answer, index) => {
    if (isAnswered) return;
    setIsAnswered(true);
    setSelectedOption(index);
    setTimeout(() => {
      if (answer === currentScale.name) {
        setScore((prev) => prev + 1);
      }
      if (questionNumber + 1 < totalQuestions) {
        setQuestionNumber((prev) => prev + 1);
        generateQuestion();
      } else {
        setIsQuizFinished(true);
      }
      setSelectedOption(null);
      setIsAnswered(false);
    }, 500);
  };

  const resetQuiz = () => {
    setIsQuizFinished(false);
    setScore(0);
    setQuestionNumber(0);
    setUsedScales([]);
  };

  return {
    currentScale,
    options,
    score,
    questionNumber,
    totalQuestions,
    isQuizFinished,
    selectedOption,
    generateQuestion,
    playScale,
    handleAnswer,
    resetQuiz
  };
}


// =======================
// components/QuizPage.js
// =======================
import React from 'react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';
import { useScaleQuizLogic } from './QuizLogic';

export function QuizPage() {
  const router = useRouter();
  const {
    currentScale,
    options,
    score,
    questionNumber,
    totalQuestions,
    isQuizFinished,
    selectedOption,
    playScale,
    handleAnswer,
    resetQuiz
  } = useScaleQuizLogic();

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 1.0 }}
      className="min-h-screen bg-cover bg-center bg-no-repeat dark:bg-gray-900 dark:text-white"
    >
      {isQuizFinished ? (
        <motion.main
          initial={{ y: 300, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 1.0 }}
          className="flex flex-col items-center justify-center min-h-screen p-6 w-full max-w-sm mx-auto bg-white dark:bg-gray-800 shadow-lg rounded-lg"
        >
          <h1 className="text-2xl font-bold mb-4 text-center">クイズ結果</h1>
          <p className="mb-4 text-lg text-center">スコア: {score} / {totalQuestions}</p>
          <p className="mb-8 text-lg text-center">正答率: {((score / totalQuestions) * 100).toFixed(2)}%</p>

          <div className="flex flex-col sm:flex-row gap-4 w-full">
            <button
              onClick={resetQuiz}
              className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg w-full sm:w-auto"
            >
              もう一度プレイ
            </button>
            <button
              onClick={() => router.push('/')}
              className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg w-full sm:w-auto"
            >
              トップに戻る
            </button>
          </div>
        </motion.main>
      ) : (
        <AnimatePresence mode="wait">
          <motion.main
            key={questionNumber}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.5 }}
            className="flex flex-col items-center justify-center min-h-screen p-4"
          >
            <h1 className="text-2xl font-bold mb-4 text-center">スケールクイズ</h1>
            {currentScale && (
              <>
                <p className="mb-4 text-lg text-center">スコア: {score}</p>
                <p className="mb-4 text-lg text-center">問題: {questionNumber + 1} / {totalQuestions}</p>
                <button
                  onClick={playScale}
                  className="flex items-center justify-center bg-[#1DB954] hover:bg-[#1ED760] text-white rounded-full w-16 h-16 shadow-md transition-colors duration-200"
                  aria-label="再生"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    fill="currentColor"
                    className="bi bi-play-circle"
                    viewBox="0 0 16 16"
                  >
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                    <path d="M6.271 5.055a.5.5 0 0 1 .52.038l3.5 2.5a.5.5 0 0 1 0 .814l-3.5 2.5A.5.5 0 0 1 6 10.5v-5a.5.5 0 0 1 .271-.445" />
                  </svg>
                </button>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 w-full max-w-md mt-4">
                  {options.map((option, index) => (
                    <motion.button
                      key={index}
                      onClick={() => handleAnswer(option.name, index)}
                      className={`bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 shadow-md rounded-lg p-4 text-center hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 ${
                        selectedOption === index ? 'selected' : ''
                      }`}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      {option.name}
                    </motion.button>
                  ))}
                </div>
                <button
                  onClick={() => router.push('/')}
                  className="mt-8 bg-gray-500 hover:bg-gray-600 text-white px-6 py-3 rounded-lg"
                >
                  トップに戻る
                </button>
              </>
            )}
          </motion.main>
        </AnimatePresence>
      )}
    </motion.div>
  );
}


// =======================
// pages/quiz/index.js
// =======================
// Finally, in Next.js, you can use your QuizPage component here.

import React from "react"
import { QuizPage } from "@/components/QuizPage";

export default function QuizIndex() {
  return <QuizPage />;
}

// ===========================
// Table of Components
// ===========================
// | File                | Component / Hook    | Purpose / Description                                     |
// |---------------------|---------------------|-----------------------------------------------------------|
// | PianoKey.js         | PianoKey            | Single key (white/black). On click, plays note.          |
// | PianoKeyboard.js    | PianoKeyboard       | Renders an octave of keys. Manages audio with Tone.js.   |
// | QuizLogic.js        | useScaleQuizLogic   | Custom hook containing quiz logic and state management.  |
// | QuizPage.js         | QuizPage            | Actual Quiz UI, uses the hook for logic, manages layout. |
// | pages/quiz/index.js | QuizIndex (default) | Next.js page that renders QuizPage.                      |




